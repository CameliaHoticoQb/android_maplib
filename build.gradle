/*
 * Project:  NextGIS Mobile
 * Purpose:  Mobile GIS for Android.
 * Author:   Dmitry Baryshnikov (aka Bishop), bishop.dev@gmail.com
 * Author:   NikitaFeodonit, nfeodonit@yandex.com
 * Author:   Stanislav Petriakov, becomeglory@gmail.com
 * *****************************************************************************
 * Copyright (c) 2012-2016 NextGIS, info@nextgis.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.gradle.internal.os.OperatingSystem;


apply plugin: "com.android.library"


def float ndkBuildGradleVersion = 2.10
def String gradleVerStr = "$gradle.gradleVersion"
def float gradleVerInt = gradleVerStr.isFloat() ? gradleVerStr.toFloat() : ndkBuildGradleVersion
def boolean isCmakeBuild = gradleVerInt > ndkBuildGradleVersion

if (isCmakeBuild) {
    apply from: "build-cmake.gradle"
}


def getNdkPlatformLevel(abi)
{
    def platform32 = 9
    def platform64 = 21

    switch (abi) {
        case "armeabi":
            return platform32
        case "armeabi-v7a":
            return platform32
        case "x86":
            return platform32
        case "mips":
            return platform32
        default:
            return platform32

        case "arm64-v8a":
            return platform64
        case "x86_64":
            return platform64
        case "mips64":
            return platform64
    }
}


android {
    compileSdkVersion 23
    buildToolsVersion "24.0.0"
    def buildTypeName = ""
    // drop mips for now "mips", , "mips64"
    def androidAbis = ["armeabi", "armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
//    def androidAbis = ["armeabi-v7a"] // for debug

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 19
        versionName "3.0"
    }

    buildTypes {
        release {
            buildTypeName = "Release"
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            buildTypeName = "Debug"
            jniDebuggable true
        }
    }

    sourceSets {
        main {
            java {
                exclude "${projectDir}/libngstore/build/gen/bindings/*.java"
            }
        }
    }

    androidAbis.each { abi ->

        task "cmakeConfigure-${abi}"(type: Exec) {
            task ->
                description "Execute cmake configure."
                workingDir getWorkDir(abi)

                def cmakeCmd = "cmake" +
//                        " -DSKIP_GIT_PULL=TRUE" +
                        " -DBUILD_TARGET_PLATFORM=ANDROID" +
                        " -DANDROID_NDK=${getNdkDir()}" +
                        " -DANDROID_NATIVE_API_LEVEL=${getNdkPlatformLevel(abi)}" +
                        " -DANDROID_ABI=${abi}" +
                        " -DCMAKE_BUILD_TYPE=Release" + // let's always release ${buildTypeName}
                        " -DBUILD_SHARED_LIBS=ON" +
                        " -DCMAKE_INSTALL_PREFIX=${getWorkDir(abi)}/inst/" +
                        " ../"

                commandLine getShell(), getShellArg(), "${cmakeCmd}"
                println("Command line of ${task.getName()}: ${commandLine}")
        }

        task "cmakeBuild-${abi}"(type: Exec, dependsOn: "cmakeConfigure-${abi}") {
            task ->
                description "Execute cmake build."
                workingDir getWorkDir(abi)

                def cmakeCmd = "cmake --build ."

                commandLine getShell(), getShellArg(), "${cmakeCmd}"
                println("Command line of ${task.getName()}: ${commandLine}")
        }

        task "copyNativeLibs-${abi}"(type: Copy, dependsOn: "cmakeBuild-${abi}") {
            description "Copy so files."

            from(new File(getWorkDir(abi), "/libngstore/src")) { include "*.so" }
            from(new File(getWorkDir(abi), "/src")) { include "*.so" }
            into(new File("src/main/jni", abi))
        }
    }

    task copyJSources(type: Copy,
            dependsOn: androidAbis.collect { androidAbi -> "copyNativeLibs-${androidAbi}" }) {
        description "Copy java files."

        from(new File("libngstore/build/gen/bindings")) { include "**/*.java" }
        into(new File("src/main/java/com/nextgis/store"))
    }

    sourceSets.main {
        if(!isCmakeBuild) {
            jniLibs.srcDir "src/main/libs" //set libs as .so's location instead of jniLibs
            jni.srcDirs = [] //disable automatic ndk-build call with auto-generated Android.mk
        }
    }

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec, dependsOn: copyJSources) {
        commandLine "${getNdkBuildCmd()}", "-C", file("src/main").absolutePath
    }

    tasks.withType(JavaCompile) { compileTask ->
        if(!isCmakeBuild) {
            compileTask.dependsOn ndkBuild
        }
    }

    androidAbis.each { androidAbi ->
        task "cleanNative-${androidAbi}"(type: Exec) {
            workingDir getWorkDir(androidAbi)
            def cmakeCmd = "cmake --build . --target clean"
            commandLine getShell(), getShellArg(), "${cmakeCmd}"
        }
    }
    clean.dependsOn androidAbis.collect { androidAbi -> "cleanNative-${androidAbi}" }

    productFlavors {
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
}


def getSdkDir()
{
    if (System.env.ANDROID_HOME != null) {
        return System.env.ANDROID_HOME
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    def sdkdir = properties.getProperty("sdk.dir", null)
    if (sdkdir == null) {
        throw new GradleException("""\
                SDK location not found.
                Define location with sdk.dir in the local.properties file
                or with an ANDROID_HOME environment variable.""")
    }

    return sdkdir
}


def getNdkDir()
{
    if (System.env.ANDROID_NDK_ROOT != null) {
        return System.env.ANDROID_NDK_ROOT
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    def ndkdir = properties.getProperty("ndk.dir", null)
    if (ndkdir == null) {
        throw new GradleException("""\
                NDK location not found.
                Define location with ndk.dir in the local.properties file
                or with an ANDROID_NDK_ROOT environment variable.""")
    }

    return ndkdir
}


def getNdkBuildCmd()
{
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (OperatingSystem.current().isWindows()) {
        ndkbuild += ".cmd"
    }
    return ndkbuild
}


def getShell()
{
    if (OperatingSystem.current().isWindows()) {
        return "cmd"
    } else {
        return "sh"
    }
}


def getShellArg()
{
    if (OperatingSystem.current().isWindows()) {
        return "/c"
    } else {
        return "-c"
    }
}


def getWorkDir(String abi)
{
    def libngsandroidfolder = "libngsandroid"
    def folder = project.file("${libngsandroidfolder}/build-${abi}/inst")
    if (!folder.exists()) {
        // Create all folders up-to and including build
        folder.mkdirs()
    }

    return folder.parent
}
