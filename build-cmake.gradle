/*
 * Project:  NextGIS Mobile
 * Purpose:  Mobile GIS for Android.
 * Author:   Dmitry Baryshnikov (aka Bishop), bishop.dev@gmail.com
 * Author:   NikitaFeodonit, nfeodonit@yandex.com
 * Author:   Stanislav Petriakov, becomeglory@gmail.com
 * *****************************************************************************
 * Copyright (c) 2012-2016 NextGIS, info@nextgis.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


// native cmaked part
android {
//    defaultPublishConfig "debug" // uncomment it for the debug of the native code
}

def String buildConfig = android.defaultPublishConfig.substring(0, 1).toUpperCase() +
        android.defaultPublishConfig.substring(1, android.defaultPublishConfig.length())

android {
    // drop mips for now "mips", , "mips64"
//    def cmAndroidAbis = ["armeabi", "armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
    def cmAndroidAbis = ["armeabi-v7a"] // TODO:
    def String abiFiltersString = cmAndroidAbis.toString()
    abiFiltersString = abiFiltersString.substring(1, abiFiltersString.length() - 1)

    defaultConfig {
        externalNativeBuild {
            cmake {
                abiFilters "${abiFiltersString}"

//                targets "ngstore", "ngstoreapi", "ngsandroid"

                arguments "-DSUPRESS_VERBOSE_OUTPUT=OFF",
//                        "-DCMAKE_VERBOSE_MAKEFILE=TRUE",
                        "-DSKIP_GIT_PULL=TRUE",
//                        "-DSTRIP_NGS_LIBS=TRUE",

                        "-DANDROID_PLATFORM=android-9", // ${getNdkPlatformLevel(abi)} // TODO:
                        "-DANDROID_TOOLCHAIN=gcc",
//                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_STL=gnustl_static",
//                        "-DANDROID_STL=c++_static",
                        "-DANDROID_CPP_FEATURES=rtti exceptions",
//                        "-DCMAKE_TOOLCHAIN_FILE=${projectDir}/libngsandroid/cmake/android.toolchain.cmake",
                        "-GAndroid Gradle - Unix Makefiles",
                        "-DCMAKE_MAKE_PROGRAM=make",
                        "-DBUILD_SHARED_LIBS=ON",

                        "-DBUILD_TARGET_PLATFORM=ANDROID"

//                        "-DCXX_STANDARD=14",
//                        "-DCXX_STANDARD_REQUIRED=ON",

//                        "-DCMAKE_BUILD_TYPE=Release" // let's always release ${buildTypeName}
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "libngsandroid/CMakeLists.txt"
        }
    }

    def String genSrcJavaDir = "${projectDir}/.externalNativeBuild/cmake/${defaultPublishConfig}" +
            "/${cmAndroidAbis.get(0)}/libngstoreapi/libngstore/bindings"

    task cmCopyJSources(type: Copy) {
        description "Copy java files."

        from(new File(genSrcJavaDir)) { include "*.java" }
        into new File("src/main/java/com/nextgis/store")
    }

    task cmMoveJSources(type: Delete, dependsOn: cmCopyJSources) {
        delete fileTree(new File(genSrcJavaDir)) { include "*.java" }
    }

    cmMoveJSources.dependsOn {
        // TODO: set from buildType
        // externalNativeBuildDebug is before externalNativeBuildRelease
        // if externalNativeBuildDebug is enabled then externalNativeBuildDebug else externalNativeBuildRelease
        tasks.findAll { task -> task.name.equals("externalNativeBuildDebug") }
    }

// TODO:
//    androidAbis.each { androidAbi ->
//        task "cleanNative-${androidAbi}"(type: Exec) {
//            workingDir getWorkDir(androidAbi)
//            def cmakeCmd = "cmake --build . --target clean"
//            commandLine getShell(), getShellArg(), "${cmakeCmd}"
//        }
//    }
//    clean.dependsOn androidAbis.collect { androidAbi -> "cleanNative-${androidAbi}" }
}

def String dependedTask = "compile${buildConfig}JavaWithJavac"

tasks.all {
    task ->
        if (task.name.equals(dependedTask)) {
            task.dependsOn cmMoveJSources
        }
}
